<?php

namespace App\Http\Controllers;
use Illuminate\Support\Str;
use App\Models\Demande;
use Illuminate\Http\Request;
use App\Models\Classement;
use Illuminate\Support\Facades\DB;
use App\Models\Cabine;
use App\Models\Planification;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use App\Mail\DemandeRecue;

class DemandeResidenceController extends Controller
{

    public function index()
    {
        return view('vitrine.index');
    }

    public function create()
    {
        // VÃ©rifier s'il existe une planification en cours
        $planification = \App\Models\Planification::where('statut', 'ouverte')
                        ->where('description', 'Lancement d\'inscription')
                        ->latest()
                        ->first(); 
    
        return view('vitrine.createdemande', compact('planification'));
    }
    

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'nom' => 'required|string|max:255',
            'prenom' => 'required|string|max:255',
            'telephone' => 'required|string|max:20',
            'email' => 'required|email',
            'date_naissance' => 'required|date',
            'lieu_naissance' => 'required|string|max:255',
            'domicile' => 'required|string|max:255',
            'etablissement' => 'required|string|max:255',
            'filiere' => 'required|string|max:255',
            'annee_etude' => 'required|string|max:255',
            'fiche_inscription' => 'required|file|mimes:pdf,jpg,jpeg,png|max:10000',  // pour accepter les fichiers pdf, jpg, jpeg, png
            'sexe' => 'required|string|max:10',
            'nationalite' => 'required|string|max:255',
            'adresse_personnelle' => 'required|string|max:255',
            'adresse_residence_parents' => 'required|string|max:255',
            'statut_aide' => 'required|in:boursier,secouru,aucun',
            'ancien_resident' => 'required|boolean',
            'batiments' => 'nullable|string|max:255',
            'redoublant' => 'required|boolean',
            'handicap' => 'required|boolean',
            'type_handicap' => 'nullable|string|max:255',
            'certificat_handicap' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:10000',  // fichier pour le certificat de handicap
        ]);

        // VÃ©rifier s'il existe une planification en cours
        $planification = \App\Models\Planification::where('statut', 'ouverte')->where('description','Lancement d\'inscription')->latest()->first();

        // si aucune planification ouverte, on empÃªche l'enregistrement
        if(!$planification){
            return redirect()->back()->with('error', 'Aucune planification en cours. Veuillez rÃ©essayer plus tard');
        }

        // Associer la demande Ã  la planification existante
        $validatedData['planification_id'] = $planification->id ;

        // GÃ©nÃ©rer un code de suivi unique
        $validatedData['code_suivi'] = strtoupper(uniqid('REQ'));

        //Statut
        $validatedData['statut'] = 'En cours de traitement';

        // Stocker la demande
        $demande = Demande::create($validatedData);

         ///Mail::to($demande->email)->send(new DemandeRecue($demande, $validatedData['code_suivi']));

        return redirect()->route('demandes.confirmation', ['code_suivi' => $demande->code_suivi]);
    }

    public function confirmation($code_suivi)
    {
        return view('vitrine.messageconfirmation', ['code_suivi' => $code_suivi]);
    }


    public function suivre()
    {
        return view('vitrine.suivi');
    }

    public function suivreDemande(Request $request)
    {
        // Valider que le code de suivi a Ã©tÃ© soumis
        $request->validate([
            'tracking_code' => 'required|string|max:255',
        ]);

        // Rediriger vers la page d'affichage de la demande avec le code de suivi
        return redirect()->route('afficher.demande', ['code_suivi' => $request->tracking_code]);
    }


    public function afficherDemande($code_suivi)
{
    // ğŸ”¹ Ã‰tape 1 : VÃ©rifier si la demande existe
    $demande = Demande::where('code_suivi', $code_suivi)->first();

    if (!$demande) {
        return redirect()->back()->with('error', 'Aucune demande trouvÃ©e avec ce code de suivi.');
    }

    // ğŸ”¹ Ã‰tape 2 : RÃ©cupÃ©rer la derniÃ¨re annÃ©e acadÃ©mique
    $anneeAcademique = \App\Models\AnneeAcademique::latest()->first();

    if (!$anneeAcademique) {
        return redirect()->back()->with('error', 'Aucune annÃ©e acadÃ©mique trouvÃ©e.');
    }

    // VÃ©rifier si la demande appartient Ã  la derniÃ¨re annÃ©e acadÃ©mique
    if ($demande->planification->annee_academique_id !== $anneeAcademique->id) {
        return redirect()->back()->with('error', 'Ce code de suivi appartient Ã  une ancienne annÃ©e acadÃ©mique.');
    }

    // ğŸ”¹ Ã‰tape 3 : VÃ©rifier si une planification "rÃ©sultat" avec statut "ouverte" existe pour cette annÃ©e acadÃ©mique
    $planificationResultat = Planification::where('description', 'RÃ©sultat')
        ->where('statut', 'ouverte')
        ->where('annee_academique_id', $anneeAcademique->id)
        ->first();

    if (!$planificationResultat) {
        return view('vitrine.infodemande', [
            'message' => 'Demande en cours de traitement.',
            'demande' => $demande // ğŸ”¹ Passer les infos de la demande
        ]);
    }

    // ğŸ”¹ Ã‰tape 4 : VÃ©rifier si la demande est classÃ©e
    $classement = Classement::where('code_suivi', $code_suivi)->first();

    if ($classement) {
        $cabine = Cabine::where('id', $classement->cabine_id)->first();

        return view('vitrine.infodemande', [
            'message' => 'FÃ©licitations ! Vous avez Ã©tÃ© retenu.',
            'classement' => $classement,
            'cabine' => $cabine,
            'demande' => $demande // ğŸ”¹ Passer les infos de la demande
        ]);
    }

    // ğŸ”¹ Ã‰tape 5 : Si la demande n'est pas classÃ©e, afficher un message de non-admission
    return view('vitrine.infodemande', [
        'message' => 'DÃ©solÃ©, vous nâ€™avez pas Ã©tÃ© retenu.',
        'demande' => $demande // ğŸ”¹ Passer les infos de la demande
    ]);
}



    public function admin_index(Request $request)
    {
        // RÃ©cupÃ©rer la derniÃ¨re annÃ©e acadÃ©mique crÃ©er
       $latestAcademicYear = \App\Models\AnneeAcademique::latest()->first();

       // VÃ©rifier si une annÃ©e acadÃ©mique existe
       if(!$latestAcademicYear){
        return redirect()->back()->with('error', 'Aucune annÃ©e acadÃ©mique trouvÃ©.');
       }

       // RÃ©cupÃ©rer l'annÃ©e acadÃ©mique sÃ©lectionnÃ©e ( par dÃ©faut, la derniÃ¨re crÃ©Ã©e)
       $academicYearId = $request->input('academic_year_id',$latestAcademicYear->id);

       // RÃ©cupÃ©rer les demandes a cette annÃ©e acadÃ©mique via la planification
       $demandes = Demande::whereHas('planification', function ($query) use ($academicYearId){
            $query->where('annee_academique_id', $academicYearId);
       })->paginate(10);


        // RÃ©cupÃ©rer toutes les annÃ©es acadÃ©mique disponible pour le filtre
        $academicYears = \App\Models\AnneeAcademique::orderBy('id', 'desc')->get();

        return view('pages.demandes.index', compact('demandes', 'academicYearId', 'academicYears'));
    }

    public function autocomplete(Request $request)
    {
        $term = $request->input('term');
        $codesSuivi = Demande::where('code_suivi', 'LIKE', '%' . $term . '%')
                            ->whereNotIn('code_suivi', Classement::pluck('code_suivi'))
                            ->get(['code_suivi']);

        return response()->json($codesSuivi);
    }

    function lancerClassement()
    {
        DB::transaction(function () {
            // ğŸ”¹ RÃ©cupÃ©rer la derniÃ¨re planification avec description "Lancement d'inscription"
            $planification = Planification::where('description', 'Lancement d\'inscription')
                ->orderBy('created_at', 'desc')
                ->first();

            if (!$planification) {
                throw new \Exception("Aucune planification d'inscription trouvÃ©e.");
            }

            // ğŸ”¹ RÃ©cupÃ©rer les demandes Ã©ligibles (pas encore classÃ©es)
            $demandes = Demande::where('planification_id', $planification->id)
                ->whereDoesntHave('classement') // Exclure celles dÃ©jÃ  classÃ©es
                ->get();

            if ($demandes->isEmpty()) {
                throw new \Exception("Aucune demande Ã©ligible trouvÃ©e.");
            }

            // ğŸ”¹ Calculer le score pour chaque demande
            $demandes = $demandes->map(function ($demande) {
                $score = 0;

                // ğŸ“Œ CritÃ¨re 1 : Ã‚ge (plus jeune = meilleur score)
                $age = now()->diffInYears($demande->date_naissance);
                $score += (100 - $age); // Moins on est Ã¢gÃ©, plus le score est Ã©levÃ©.

                // ğŸ“Œ CritÃ¨re 2 : AnciennetÃ© en cabine
                if ($demande->ancien_resident) {
                    $score -= 20; // Malus si dÃ©jÃ  rÃ©sident.
                }

                // ğŸ“Œ CritÃ¨re 3 : Statut financier
                if ($demande->boursier || $demande->secouru) {
                    $score += 20; // Bonus pour Ã©tudiants en difficultÃ© financiÃ¨re.
                } elseif ($demande->salarie) {
                    $score -= 50; // Malus pour les salariÃ©s.
                }

                // ğŸ“Œ CritÃ¨re 4 : Redoublement
                if ($demande->redoublant) {
                    $score -= 20; // Malus si redoublant.
                }

                // ğŸ“Œ Sauvegarde du score temporaire (non en BDD)
                $demande->score = $score;
                return $demande;
            });

            // ğŸ”¹ Trier les demandes par score dÃ©croissant
            $demandes = $demandes->sortByDesc('score');

            // ğŸ”¹ RÃ©cupÃ©rer les cabines disponibles
            $cabines = Cabine::where('places_disponibles', '>', 0)->with('batiment')->get();

            if ($cabines->isEmpty()) {
                throw new \Exception("Aucune cabine disponible.");
            }

            // ğŸ”¹ RÃ©partition des cabines
            foreach ($demandes as $demande) {
                // Trouver une cabine du mÃªme sexe
                $cabineAttribuee = $cabines->first(function ($cabine) use ($demande) {
                    return $cabine->batiment->sexe === $demande->sexe && $cabine->places_disponibles > 0;
                });

                if ($cabineAttribuee) {
                    // ğŸ”¹ CrÃ©er le classement
                    Classement::create([
                        'code_suivi' => $demande->code_suivi,
                        'cabine_id' => $cabineAttribuee->id,
                        'est_valide' => false, // Non validÃ© par dÃ©faut
                        'caissiere_id' => null
                    ]);

                    // ğŸ”¹ DÃ©crÃ©menter les places disponibles
                    $cabineAttribuee->decrement('places_disponibles');

                    // ğŸ”¹ Supprimer cette cabine si pleine
                    if ($cabineAttribuee->places_disponibles <= 0) {
                        $cabines = $cabines->reject(fn($c) => $c->id === $cabineAttribuee->id);
                    }
                }
            }
        });

        return redirect()->route('classements.index')->with('success', 'RÃ©partition faite avec succÃ¨s.');
    }
}


